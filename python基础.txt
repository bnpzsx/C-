关键字
and		exec		not
assert		finally		or
break		for			pass
class		from		print
continue 	global		raise
def		if			return
del		import		try
elif		in			while
else		is			with
except		lambda		yield

IndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，

使用斜杠（ \）作为续行符
	[], {} 或 () 括号内换行不需要换行符
单行注释采用 # 开头。
	多行注释使用三个单引号(''')或三个双引号(""")
if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束
	缩进相同表示语句块
语句结束可以用换行也可以用(;)

变量赋值不需要类型声明,自动判断类型？
变量赋值以后该变量才会被创建
多个变量赋值
	a = b = c = 1#创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。
	a, b, c = 1, 2, "john" #两个整型对象1和2的分配给变量 a 和 b，字符串对象 "john" 分配给变量 c。
	
五个标准的数据类型：
	Numbers（数字）
		int（有符号整型）
		long（长整型[也可以代表八进制和十六进制]） 	51924361L
		float（浮点型） 
		complex（复数）1+2j
		
	String（字符串）
		字串列表有2种取值顺序:
			从左到右索引默认0开始的，最大范围是字符串长度少1
			从右到左索引默认-1开始的，最大范围是字符串开头
		用变量[头下标:尾下标]截取相应的字符串
			str = 'Hello1World!'
			str[2:5]为"llo" #只包含左边界
		str * 2 表示重复str两次
		'+'用于字符串连接
	
	List（列表）
		通用的复合数据类型
		list = [ 'runoob', 786 , 2.23, 'john', 70.2 ]
		操作与字符串类似
		
	Tuple（元组）
		类似于List（列表）
		用"()"标识
		相当于只读列表

	Dictionary（字典）
		字典当中的元素是通过键来存取的，而不是通过偏移存取
		字典用"{ }"标识
		字典由索引(key)和它对应的值value组成
	
数据类型转换
	类型名()
	repr(x) 将对象 x 转换为表达式字符串
	eval(str) 用来计算在字符串中的有效Python表达式,并返回一个对象
	tuple(s) 将序列 s 转换为一个元组
	dict(d) 创建一个字典。d 必须是一个序列 (key,value)元组。
	set(s) 转换为可变集合
	frozenset(s) 转换为不可变集合
	ord(x) 将一个字符转换为它的整数值
	
算术运算符
	**	幂 - 返回x的y次幂	a**b 为10的20次方， 输出结果 100000000000000000000
	//	取整除 - 返回商的整数部分	9//2 输出结果 4 , 9.0//2.0 输出结果 4.0
	
比较运算符
	同时支持<>和!=

赋值运算符 位运算
	同C++
	
逻辑运算符
	同VB（没有xor）

成员运算符
	n		如果在指定的序列中找到值返回 True，否则返回 False
	not in	如果在指定的序列中没有找到值返回 True，否则返回 False

身份运算符(判断是否是同一个对象的引用)
	is		is是判断两个标识符是不是引用自一个对象		x is y, 如果 id(x) 等于 id(y) , is 返回结果 1
	is not	is not是判断两个标识符是不是引用自不同对象	x is not y, 如果 id(x) 不等于 id(y). is not 返回结果 1

运算符优先级
	**			指数 (最高优先级)
	~ + -		按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
	* / % //	乘，除，取模和取整除
	+ -			加法减法
	>> <<		右移，左移运算符
	&			位 'AND'
	^ |			位运算符
	<= < > >=	比较运算符
	<> == !=	等于运算符
	= %= /= //= -= += *= **=	赋值运算符
	is is not	身份运算符
	in not in	成员运算符
	not or and	逻辑运算符

条件语句
	if 判断条件1:
		执行语句1……
	elif 判断条件2:
		执行语句2……
	elif 判断条件3:
		执行语句3……
	else:
		执行语句4……
	
循环语句
	while
		while 判断条件：
		执行语句……
	for
		for iterating_var in sequence:
		statements(s)
		例如：
		for letter in 'Python':     
			print '当前字母 :', letter
		
		fruits = ['banana', 'apple',  'mango']
		for fruit in fruits:       
			print '当前水果 :', fruit
		for index in range(len(fruits)): # range默认下标为0，同样只含左边界
			print '当前水果 :', fruits[index]
		
		for num in range(1,10): # 输出1~9
			print num
	
	pass # 空语句

自定义函数
	def functionname( parameters ):
		"函数说明"
		function_suite
		return [expression]
		
	传参
		strings, tuples,numbers 是不可更改的对象 # 相当于值传递
		list,dict 是可以修改的对象 # 相当于引用传递
	
		关键字参数
			如 fun( str = "My string"); # str为参数名，多个参数时可以不按顺序写
		
		默认参数
			如 def printinfo( name, age = 35 ):
			
		不定长参数
			def printinfo( arg1, *vartuple ):
				"打印任何传入的参数"
				print "输出: "
				print arg1
				for var in vartuple:
					print var
				return;
	
	匿名函数
		lambda [arg1 [,arg2,.....argn]]:expression
		如
		sum = lambda arg1, arg2: arg1 + arg2;
		print "相加后的值为 : ", sum( 10, 20 )
	
	不带参数值的return语句返回None # 如 return;
	
模块
	import语句
		import module1[, module2[,... moduleN]
		如
		import support
		support.print_func("Zara")
	
	From…import 语句 
		从模块中导入一个指定的部分到当前命名空间中
		from modname import name1[, name2[, ... nameN]]
	
	命名空间
		在函数内python默认在局部空间空间寻找变量
		global 变量名 # 声明是全局变量
	
	dir()函数
		返回一个模块中定义的对象
		如
		import math
		content = dir(math)
	
	globals()和locals()函数
		在函数内部调用
			locals()，返回所有能在该函数里访问的命名。
			globals()，返回所有在该函数里能访问的全局名字。
		两个函数的返回类型都是字典。所以名字们能用keys()函数摘取。

	reload()函数
		重新执行模块里顶层部分的代码
		reload(module_name)
	
	包(？工作空间)
		一个分层次的文件目录结构，
		它定义了一个由模块及子包，
		和子包下的子包等组成的Python的应用环境
		在__init__.py中使用显式的导入语句
		如
			from Pots import Pots
			from Isdn import Isdn
			from G3 import G3
		导入包后这些函数相当于包中的函数

		
		

		
		

